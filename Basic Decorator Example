# Decorator function
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

# Function to be decorated
def say_hello():
    print("Hello!")

# Applying the decorator using the "@" syntax
@my_decorator
def decorated_say_hello():
    print("Hello, decorated!")

# Calling the original function
say_hello()

# Calling the decorated function
decorated_say_hello()
